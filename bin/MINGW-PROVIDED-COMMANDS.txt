# Commands Provided by MinGW/Git Bash

Git Bash (MinGW) provides a comprehensive set of Unix/Linux commands for Windows.
These are already included in the base Git Bash installation - no need to add them separately.

## Core Shell Commands
- `bash` - Bourne Again Shell
- `sh` - POSIX shell
- `echo` - Display text
- `printf` - Format and print data
- `read` - Read user input
- `source` / `.` - Execute commands from file
- `exec` - Replace shell with command
- `exit` - Exit shell

## File System Navigation
- `cd` - Change directory
- `pwd` - Print working directory
- `ls` - List directory contents
- `dir` - Alias for ls
- `pushd` - Push directory onto stack
- `popd` - Pop directory from stack
- `dirs` - Display directory stack

## File Operations
- `cp` - Copy files/directories
- `mv` - Move/rename files
- `rm` - Remove files/directories
- `mkdir` - Make directories
- `rmdir` - Remove empty directories
- `touch` - Create empty file or update timestamp
- `ln` - Create links
- `readlink` - Print resolved symbolic links
- `realpath` - Print resolved absolute path
- `basename` - Strip directory from filename
- `dirname` - Strip filename from path

## File Viewing/Editing
- `cat` - Concatenate and print files
- `less` - Page through text
- `more` - Page through text (simple)
- `head` - Show first lines
- `tail` - Show last lines
- `nano` - Simple text editor
- `vi/vim` - Vi text editor

## Text Processing
- `grep` - Search text patterns
- `egrep` - Extended grep
- `fgrep` - Fixed string grep
- `sed` - Stream editor
- `awk` - Pattern scanning and processing
- `cut` - Extract columns
- `paste` - Merge lines of files
- `sort` - Sort lines
- `uniq` - Report or omit unique lines
- `tr` - Translate characters
- `wc` - Word, line, character count
- `split` - Split files
- `csplit` - Split files by context
- `join` - Join lines on common field
- `comm` - Compare sorted files
- `diff` - Compare files
- `patch` - Apply patches
- `fold` - Wrap lines
- `fmt` - Format text
- `pr` - Format for printing
- `expand` - Convert tabs to spaces
- `unexpand` - Convert spaces to tabs
- `nl` - Number lines
- `od` - Dump files in octal/hex

## File Permissions & Attributes
- `chmod` - Change file permissions
- `chown` - Change file ownership
- `chgrp` - Change group ownership
- `umask` - Set default permissions
- `stat` - Display file status
- `file` - Determine file type
- `du` - Disk usage
- `df` - Disk free space

## Process Management
- `ps` - Show processes
- `kill` - Terminate processes
- `killall` - Kill processes by name
- `jobs` - List active jobs
- `bg` - Background job
- `fg` - Foreground job
- `nohup` - Run immune to hangups
- `nice` - Run with modified priority
- `sleep` - Delay for specified time
- `wait` - Wait for processes

## Archive & Compression
- `tar` - Archive files
- `gzip` - Compress files
- `gunzip` - Decompress gzip files
- `bzip2` - Compress files (bzip2)
- `bunzip2` - Decompress bzip2 files
- `zip` - Create ZIP archives
- `unzip` - Extract ZIP archives
- `zcat` - View compressed files

## Network Tools
- `curl` - Transfer data from URLs
- `wget` - Download files
- `ssh` - Secure shell client
- `scp` - Secure copy
- `sftp` - Secure FTP
- `rsync` - Synchronize files
- `ping` - Test connectivity
- `hostname` - Display hostname
- `whoami` - Display username

## System Information
- `date` - Display/set date and time
- `cal` - Display calendar
- `uptime` - Show system uptime
- `uname` - System information
- `env` - Display environment
- `printenv` - Print environment variables
- `set` - Set shell variables
- `export` - Export variables
- `alias` - Create command aliases
- `unalias` - Remove aliases
- `type` - Display command type
- `which` - Locate command
- `whereis` - Locate binary/source/manual
- `id` - Print user/group IDs
- `groups` - Print group memberships
- `who` - Show who is logged on
- `w` - Show who is on and what they're doing

## Development Tools
- `git` - Version control system
- `make` - Build automation
- `gcc` - GNU C compiler
- `g++` - GNU C++ compiler
- `perl` - Perl interpreter
- `python` - Python interpreter (if installed)

## Finding Files
- `find` - Search for files
- `locate` - Find files by name (requires updatedb)
- `updatedb` - Update locate database
- `xargs` - Build command lines from input

## Stream & Pipe Tools
- `tee` - Read from stdin and write to stdout and files
- `mkfifo` - Make FIFOs (named pipes)

## Miscellaneous Utilities
- `expr` - Evaluate expressions
- `bc` - Calculator
- `seq` - Print sequences
- `yes` - Output string repeatedly
- `true` - Return success
- `false` - Return failure
- `test` / `[` - Evaluate conditional expressions
- `time` - Time command execution
- `timeout` - Run command with time limit
- `watch` - Execute command repeatedly
- `history` - Command history
- `clear` - Clear terminal screen
- `reset` - Reset terminal

## Shell Built-ins
- `if`, `then`, `else`, `elif`, `fi` - Conditionals
- `for`, `while`, `until`, `do`, `done` - Loops
- `case`, `esac` - Pattern matching
- `function` - Define functions
- `return` - Return from function
- `break` - Exit from loop
- `continue` - Next iteration
- `shift` - Shift positional parameters
- `getopts` - Parse options
- `eval` - Evaluate arguments
- `trap` - Trap signals

## Regular Commands Also Available
- `md5sum` - Compute MD5 hash
- `sha1sum` - Compute SHA1 hash
- `sha256sum` - Compute SHA256 hash
- `base64` - Base64 encode/decode
- `iconv` - Convert character encodings
- `dos2unix` - Convert DOS to Unix format
- `unix2dos` - Convert Unix to DOS format

Note: This list includes the most commonly used commands. 
Git Bash includes many more utilities in /usr/bin and /mingw64/bin.