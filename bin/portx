#!/bin/bash
# PORTX Manual System
# By Damian Sirbu

# Show manual page
show_man() {
    cat << 'EOF'
PORTX(1)                          User Commands                         PORTX(1)

NAME
       portx - Portable POSIX Environment for Windows

SYNOPSIS
       portx [COMMAND]

DESCRIPTION
       PORTX provides a complete POSIX toolkit built on Git Bash with 494 
       Windows-native command-line tools. Zero installation, zero dependencies.

ARCHITECTURE
       Foundation Layer    Git Bash (MinGW64) - 272 Unix utilities
       Enhancement Layer   Modern CLI tools - 44 productivity tools  
       Professional Layer  Enterprise tools - 127 cloud/security/dev tools
       Integration Layer   Development tools - 48 compilers/libraries

TOOL CATEGORIES
       Development         Git, GCC, text editors, build tools, runtimes
       DevOps             AWS CLI, Azure CLI, Terraform, Kubernetes, Docker
       Security           ClamAV, YARA, osquery, hash utilities, nuclei
       Text Processing    grep/sed/awk, ripgrep/bat, fd/sd, JSON/YAML processors
       System Admin       Process monitoring, file management, network utils

KEY ADVANTAGES
       Enterprise Compatible  No installation, no registry, no admin rights
       Performance           Native Windows executables, no emulation
       Portability          Self-contained, runs from any directory
       Completeness         Full POSIX shell plus modern tooling
       Integration          Seamless tool interoperability

TECHNICAL SPECIFICATIONS
       Shell Environment     Bash 4.4+ with POSIX compatibility
       Home Directory        Portable user environment with SSH/Git config
       PATH Management       Hierarchical tool discovery across bin dirs
       File System          Unix-style paths with Windows compatibility
       Process Management   Native Windows processes with Unix signals

ENVIRONMENT VARIABLES
       PORTX_ROOT           Root directory of PORTX installation
       PATH                 Enhanced with all tool directories
       HOME                 Portable home directory for user config

FILES
       bin/                 Core system executables
       bin-ext/             Enhanced Unix tools (ripgrep, bat, fzf, jq)
       bin-tools/           Professional tools (AWS, Docker, security)
       bin-tools/sysinternals/ Microsoft SysInternals command-line tools
       bin-tools/nircmd/    NirCmd - Windows automation and system control
       mingw64/             MinGW64 development environment
       usr/                 Unix utilities and libraries
       home/portable/       User configuration and SSH setup

EXAMPLES
       Basic usage:
         ls -la                List files with details
         grep pattern file     Search for pattern in file
         rg pattern            Fast recursive search with ripgrep
         fd pattern            Fast find alternative with intuitive syntax
         sd 'find' 'replace'   Intuitive find & replace with modern regex

       Professional workflows:
         aws s3 ls             List S3 buckets
         kubectl get pods      List Kubernetes pods
         nuclei -t templates/  Run vulnerability scan

       System analysis with SysInternals:
         psinfo64 -accepteula  System information and specs
         handle64 -accepteula  Show open files and handles
         pslist64 -accepteula  List running processes with details
         accesschk64 -accepteula -u user -w folder  Check folder permissions

       Windows automation with NirCmd:
         nircmd clipboard set "text"     Set clipboard content
         nircmd speak text "message"     Text-to-speech
         nircmd setsysvolume 50000       Set system volume
         nircmd monitor off              Turn off monitor
         
       Tool combinations:
         rg "error" logs/ | jq '.level' | sort | uniq -c
         fd -e js | sd 'console\.log' 'logger.info'  # Modern find/replace
         pslist64 -accepteula | rg "chrome|firefox"  # Find browser processes

AUTHOR
       Written by Damian Sirbu.

COPYRIGHT
       PORTX delivers enterprise-grade Unix functionality on Windows without
       the complexity or security concerns of traditional emulation approaches.

EOF
}

# Show version
show_version() {
    if [[ -f "$PORTX_ROOT/VERSION" ]]; then
        echo "PORTX version $(cat "$PORTX_ROOT/VERSION")"
    else
        echo "PORTX version unknown"
    fi
}

# Main command dispatcher
case "${1:-man}" in
    "man"|"manual"|""|"--help"|"-h")
        show_man
        ;;
    "version"|"--version"|"-v")
        show_version
        ;;
    *)
        echo "portx: unknown command '$1'"
        echo "Try 'portx man' for documentation."
        exit 1
        ;;
esac